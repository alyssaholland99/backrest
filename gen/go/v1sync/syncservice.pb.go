// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: v1sync/syncservice.proto

package v1sync

import (
	types "github.com/garethgeorge/backrest/gen/go/types"
	v1 "github.com/garethgeorge/backrest/gen/go/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectionState int32

const (
	ConnectionState_CONNECTION_STATE_UNKNOWN        ConnectionState = 0
	ConnectionState_CONNECTION_STATE_PENDING        ConnectionState = 1
	ConnectionState_CONNECTION_STATE_CONNECTED      ConnectionState = 2
	ConnectionState_CONNECTION_STATE_DISCONNECTED   ConnectionState = 3
	ConnectionState_CONNECTION_STATE_RETRY_WAIT     ConnectionState = 4
	ConnectionState_CONNECTION_STATE_ERROR_AUTH     ConnectionState = 10
	ConnectionState_CONNECTION_STATE_ERROR_PROTOCOL ConnectionState = 11
	ConnectionState_CONNECTION_STATE_ERROR_INTERNAL ConnectionState = 12
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		0:  "CONNECTION_STATE_UNKNOWN",
		1:  "CONNECTION_STATE_PENDING",
		2:  "CONNECTION_STATE_CONNECTED",
		3:  "CONNECTION_STATE_DISCONNECTED",
		4:  "CONNECTION_STATE_RETRY_WAIT",
		10: "CONNECTION_STATE_ERROR_AUTH",
		11: "CONNECTION_STATE_ERROR_PROTOCOL",
		12: "CONNECTION_STATE_ERROR_INTERNAL",
	}
	ConnectionState_value = map[string]int32{
		"CONNECTION_STATE_UNKNOWN":        0,
		"CONNECTION_STATE_PENDING":        1,
		"CONNECTION_STATE_CONNECTED":      2,
		"CONNECTION_STATE_DISCONNECTED":   3,
		"CONNECTION_STATE_RETRY_WAIT":     4,
		"CONNECTION_STATE_ERROR_AUTH":     10,
		"CONNECTION_STATE_ERROR_PROTOCOL": 11,
		"CONNECTION_STATE_ERROR_INTERNAL": 12,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_v1sync_syncservice_proto_enumTypes[0].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_v1sync_syncservice_proto_enumTypes[0]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{0}
}

type SyncStateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"` // If true, the stream will continue to send updates until cancelled.
}

func (x *SyncStateStreamRequest) Reset() {
	*x = SyncStateStreamRequest{}
	mi := &file_v1sync_syncservice_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncStateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStateStreamRequest) ProtoMessage() {}

func (x *SyncStateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStateStreamRequest.ProtoReflect.Descriptor instead.
func (*SyncStateStreamRequest) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{0}
}

func (x *SyncStateStreamRequest) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

type PeerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerInstanceId      string          `protobuf:"bytes,1,opt,name=peer_instance_id,json=peerInstanceId,proto3" json:"peer_instance_id,omitempty"`
	PeerKeyid           string          `protobuf:"bytes,2,opt,name=peer_keyid,json=peerKeyid,proto3" json:"peer_keyid,omitempty"`
	State               ConnectionState `protobuf:"varint,3,opt,name=state,proto3,enum=v1sync.ConnectionState" json:"state,omitempty"`
	StatusMessage       string          `protobuf:"bytes,4,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	KnownPlans          []*PlanMetadata `protobuf:"bytes,5,rep,name=known_plans,json=knownPlans,proto3" json:"known_plans,omitempty"`                               // List of plan IDs that the peer has.
	KnownRepos          []*RepoMetadata `protobuf:"bytes,6,rep,name=known_repos,json=knownRepos,proto3" json:"known_repos,omitempty"`                               // List of repo IDs that the peer has.
	RemoteConfig        *RemoteConfig   `protobuf:"bytes,7,opt,name=remote_config,json=remoteConfig,proto3" json:"remote_config,omitempty"`                         // The remote config of the peer, if available.
	LastHeartbeatMillis int64           `protobuf:"varint,8,opt,name=last_heartbeat_millis,json=lastHeartbeatMillis,proto3" json:"last_heartbeat_millis,omitempty"` // The last time the peer sent a heartbeat, in milliseconds since epoch.
}

func (x *PeerState) Reset() {
	*x = PeerState{}
	mi := &file_v1sync_syncservice_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerState) ProtoMessage() {}

func (x *PeerState) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerState.ProtoReflect.Descriptor instead.
func (*PeerState) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{1}
}

func (x *PeerState) GetPeerInstanceId() string {
	if x != nil {
		return x.PeerInstanceId
	}
	return ""
}

func (x *PeerState) GetPeerKeyid() string {
	if x != nil {
		return x.PeerKeyid
	}
	return ""
}

func (x *PeerState) GetState() ConnectionState {
	if x != nil {
		return x.State
	}
	return ConnectionState_CONNECTION_STATE_UNKNOWN
}

func (x *PeerState) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *PeerState) GetKnownPlans() []*PlanMetadata {
	if x != nil {
		return x.KnownPlans
	}
	return nil
}

func (x *PeerState) GetKnownRepos() []*RepoMetadata {
	if x != nil {
		return x.KnownRepos
	}
	return nil
}

func (x *PeerState) GetRemoteConfig() *RemoteConfig {
	if x != nil {
		return x.RemoteConfig
	}
	return nil
}

func (x *PeerState) GetLastHeartbeatMillis() int64 {
	if x != nil {
		return x.LastHeartbeatMillis
	}
	return 0
}

type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId *v1.SignedMessage `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // The ID of the peer instance.
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	mi := &file_v1sync_syncservice_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticateRequest) GetInstanceId() *v1.SignedMessage {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type GetOperationMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpIds  []int64 `protobuf:"varint,1,rep,packed,name=op_ids,json=opIds,proto3" json:"op_ids,omitempty"` // The IDs of the operations.
	Modnos []int64 `protobuf:"varint,2,rep,packed,name=modnos,proto3" json:"modnos,omitempty"`            // The modnos of the operations.
}

func (x *GetOperationMetadataResponse) Reset() {
	*x = GetOperationMetadataResponse{}
	mi := &file_v1sync_syncservice_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOperationMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationMetadataResponse) ProtoMessage() {}

func (x *GetOperationMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetOperationMetadataResponse) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{3}
}

func (x *GetOperationMetadataResponse) GetOpIds() []int64 {
	if x != nil {
		return x.OpIds
	}
	return nil
}

func (x *GetOperationMetadataResponse) GetModnos() []int64 {
	if x != nil {
		return x.Modnos
	}
	return nil
}

type LogDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId            string `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`                                     // The ID of the log, only used for the first message in a log data stream.
	OwnerOpid        int64  `protobuf:"varint,2,opt,name=owner_opid,json=ownerOpid,proto3" json:"owner_opid,omitempty"`                        // The operation ID of the operation that owns this log data.
	ExpirationTsUnix int64  `protobuf:"varint,3,opt,name=expiration_ts_unix,json=expirationTsUnix,proto3" json:"expiration_ts_unix,omitempty"` // Unix timestamp in seconds when the log data expires.
	Chunk            []byte `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`                                                  // The log data chunk, can be sent repeatedly, must be terminated by a packet with size = 0.
}

func (x *LogDataEntry) Reset() {
	*x = LogDataEntry{}
	mi := &file_v1sync_syncservice_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogDataEntry) ProtoMessage() {}

func (x *LogDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogDataEntry.ProtoReflect.Descriptor instead.
func (*LogDataEntry) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{4}
}

func (x *LogDataEntry) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *LogDataEntry) GetOwnerOpid() int64 {
	if x != nil {
		return x.OwnerOpid
	}
	return 0
}

func (x *LogDataEntry) GetExpirationTsUnix() int64 {
	if x != nil {
		return x.ExpirationTsUnix
	}
	return 0
}

func (x *LogDataEntry) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type SetAvailableResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*PlanMetadata `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"` // The repos that are available.
	Plans []*RepoMetadata `protobuf:"bytes,2,rep,name=plans,proto3" json:"plans,omitempty"` // The plans that are available.
}

func (x *SetAvailableResourcesRequest) Reset() {
	*x = SetAvailableResourcesRequest{}
	mi := &file_v1sync_syncservice_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAvailableResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAvailableResourcesRequest) ProtoMessage() {}

func (x *SetAvailableResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAvailableResourcesRequest.ProtoReflect.Descriptor instead.
func (*SetAvailableResourcesRequest) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{5}
}

func (x *SetAvailableResourcesRequest) GetRepos() []*PlanMetadata {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *SetAvailableResourcesRequest) GetPlans() []*RepoMetadata {
	if x != nil {
		return x.Plans
	}
	return nil
}

type RepoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Guid string `protobuf:"bytes,2,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *RepoMetadata) Reset() {
	*x = RepoMetadata{}
	mi := &file_v1sync_syncservice_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepoMetadata) ProtoMessage() {}

func (x *RepoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepoMetadata.ProtoReflect.Descriptor instead.
func (*RepoMetadata) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{6}
}

func (x *RepoMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RepoMetadata) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

type PlanMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlanMetadata) Reset() {
	*x = PlanMetadata{}
	mi := &file_v1sync_syncservice_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanMetadata) ProtoMessage() {}

func (x *PlanMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanMetadata.ProtoReflect.Descriptor instead.
func (*PlanMetadata) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{7}
}

func (x *PlanMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans         []*v1.Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`                                        // The plans to set.
	Repos         []*v1.Repo `protobuf:"bytes,2,rep,name=repos,proto3" json:"repos,omitempty"`                                        // The repos to set.
	ReposToDelete []string   `protobuf:"bytes,3,rep,name=repos_to_delete,json=reposToDelete,proto3" json:"repos_to_delete,omitempty"` // The repo IDs to delete.
	PlansToDelete []string   `protobuf:"bytes,4,rep,name=plans_to_delete,json=plansToDelete,proto3" json:"plans_to_delete,omitempty"` // The plan IDs to delete.
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	mi := &file_v1sync_syncservice_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{8}
}

func (x *SetConfigRequest) GetPlans() []*v1.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *SetConfigRequest) GetRepos() []*v1.Repo {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *SetConfigRequest) GetReposToDelete() []string {
	if x != nil {
		return x.ReposToDelete
	}
	return nil
}

func (x *SetConfigRequest) GetPlansToDelete() []string {
	if x != nil {
		return x.PlansToDelete
	}
	return nil
}

type RemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modno   int32      `protobuf:"varint,1,opt,name=modno,proto3" json:"modno,omitempty"`     // The modno of the config.
	Version int32      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"` // The storage version of the config.
	Repos   []*v1.Repo `protobuf:"bytes,3,rep,name=repos,proto3" json:"repos,omitempty"`
	Plans   []*v1.Plan `protobuf:"bytes,4,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *RemoteConfig) Reset() {
	*x = RemoteConfig{}
	mi := &file_v1sync_syncservice_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfig) ProtoMessage() {}

func (x *RemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfig.ProtoReflect.Descriptor instead.
func (*RemoteConfig) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{9}
}

func (x *RemoteConfig) GetModno() int32 {
	if x != nil {
		return x.Modno
	}
	return 0
}

func (x *RemoteConfig) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RemoteConfig) GetRepos() []*v1.Repo {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *RemoteConfig) GetPlans() []*v1.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type AuthorizationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  *v1.PublicKey     `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	InstanceId *v1.SignedMessage `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"` // The ID of the peer instance.
}

func (x *AuthorizationToken) Reset() {
	*x = AuthorizationToken{}
	mi := &file_v1sync_syncservice_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthorizationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationToken) ProtoMessage() {}

func (x *AuthorizationToken) ProtoReflect() protoreflect.Message {
	mi := &file_v1sync_syncservice_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationToken.ProtoReflect.Descriptor instead.
func (*AuthorizationToken) Descriptor() ([]byte, []int) {
	return file_v1sync_syncservice_proto_rawDescGZIP(), []int{10}
}

func (x *AuthorizationToken) GetPublicKey() *v1.PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AuthorizationToken) GetInstanceId() *v1.SignedMessage {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

var File_v1sync_syncservice_proto protoreflect.FileDescriptor

var file_v1sync_syncservice_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x76, 0x31, 0x73, 0x79,
	0x6e, 0x63, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x87, 0x03,
	0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x6e, 0x6f,
	0x73, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x73, 0x55, 0x6e, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x76, 0x0a, 0x1c,
	0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x54, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x7e, 0x0a,
	0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x1e, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x76, 0x0a,
	0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x2a, 0x9c, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x0b, 0x12,
	0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x0c, 0x32, 0x6c, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x73, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x76, 0x31,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x31,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x32, 0xf4, 0x03, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x57, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x76, 0x31,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e,
	0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x72, 0x65, 0x74, 0x68, 0x67, 0x65,
	0x6f, 0x72, 0x67, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x73, 0x79, 0x6e, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1sync_syncservice_proto_rawDescOnce sync.Once
	file_v1sync_syncservice_proto_rawDescData = file_v1sync_syncservice_proto_rawDesc
)

func file_v1sync_syncservice_proto_rawDescGZIP() []byte {
	file_v1sync_syncservice_proto_rawDescOnce.Do(func() {
		file_v1sync_syncservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1sync_syncservice_proto_rawDescData)
	})
	return file_v1sync_syncservice_proto_rawDescData
}

var file_v1sync_syncservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1sync_syncservice_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_v1sync_syncservice_proto_goTypes = []any{
	(ConnectionState)(0),                 // 0: v1sync.ConnectionState
	(*SyncStateStreamRequest)(nil),       // 1: v1sync.SyncStateStreamRequest
	(*PeerState)(nil),                    // 2: v1sync.PeerState
	(*AuthenticateRequest)(nil),          // 3: v1sync.AuthenticateRequest
	(*GetOperationMetadataResponse)(nil), // 4: v1sync.GetOperationMetadataResponse
	(*LogDataEntry)(nil),                 // 5: v1sync.LogDataEntry
	(*SetAvailableResourcesRequest)(nil), // 6: v1sync.SetAvailableResourcesRequest
	(*RepoMetadata)(nil),                 // 7: v1sync.RepoMetadata
	(*PlanMetadata)(nil),                 // 8: v1sync.PlanMetadata
	(*SetConfigRequest)(nil),             // 9: v1sync.SetConfigRequest
	(*RemoteConfig)(nil),                 // 10: v1sync.RemoteConfig
	(*AuthorizationToken)(nil),           // 11: v1sync.AuthorizationToken
	(*v1.SignedMessage)(nil),             // 12: v1.SignedMessage
	(*v1.Plan)(nil),                      // 13: v1.Plan
	(*v1.Repo)(nil),                      // 14: v1.Repo
	(*v1.PublicKey)(nil),                 // 15: v1.PublicKey
	(*v1.OpSelector)(nil),                // 16: v1.OpSelector
	(*v1.Operation)(nil),                 // 17: v1.Operation
	(*types.StringValue)(nil),            // 18: types.StringValue
	(*emptypb.Empty)(nil),                // 19: google.protobuf.Empty
}
var file_v1sync_syncservice_proto_depIdxs = []int32{
	0,  // 0: v1sync.PeerState.state:type_name -> v1sync.ConnectionState
	8,  // 1: v1sync.PeerState.known_plans:type_name -> v1sync.PlanMetadata
	7,  // 2: v1sync.PeerState.known_repos:type_name -> v1sync.RepoMetadata
	10, // 3: v1sync.PeerState.remote_config:type_name -> v1sync.RemoteConfig
	12, // 4: v1sync.AuthenticateRequest.instance_id:type_name -> v1.SignedMessage
	8,  // 5: v1sync.SetAvailableResourcesRequest.repos:type_name -> v1sync.PlanMetadata
	7,  // 6: v1sync.SetAvailableResourcesRequest.plans:type_name -> v1sync.RepoMetadata
	13, // 7: v1sync.SetConfigRequest.plans:type_name -> v1.Plan
	14, // 8: v1sync.SetConfigRequest.repos:type_name -> v1.Repo
	14, // 9: v1sync.RemoteConfig.repos:type_name -> v1.Repo
	13, // 10: v1sync.RemoteConfig.plans:type_name -> v1.Plan
	15, // 11: v1sync.AuthorizationToken.public_key:type_name -> v1.PublicKey
	12, // 12: v1sync.AuthorizationToken.instance_id:type_name -> v1.SignedMessage
	1,  // 13: v1sync.BackrestSyncStateService.GetPeerSyncStatesStream:input_type -> v1sync.SyncStateStreamRequest
	3,  // 14: v1sync.SyncPeerService.Authenticate:input_type -> v1sync.AuthenticateRequest
	16, // 15: v1sync.SyncPeerService.GetOperationMetadata:input_type -> v1.OpSelector
	17, // 16: v1sync.SyncPeerService.SendOperations:input_type -> v1.Operation
	18, // 17: v1sync.SyncPeerService.GetLog:input_type -> types.StringValue
	6,  // 18: v1sync.SyncPeerService.SetAvailableResources:input_type -> v1sync.SetAvailableResourcesRequest
	9,  // 19: v1sync.SyncPeerService.SetConfig:input_type -> v1sync.SetConfigRequest
	19, // 20: v1sync.SyncPeerService.GetConfig:input_type -> google.protobuf.Empty
	2,  // 21: v1sync.BackrestSyncStateService.GetPeerSyncStatesStream:output_type -> v1sync.PeerState
	19, // 22: v1sync.SyncPeerService.Authenticate:output_type -> google.protobuf.Empty
	4,  // 23: v1sync.SyncPeerService.GetOperationMetadata:output_type -> v1sync.GetOperationMetadataResponse
	19, // 24: v1sync.SyncPeerService.SendOperations:output_type -> google.protobuf.Empty
	5,  // 25: v1sync.SyncPeerService.GetLog:output_type -> v1sync.LogDataEntry
	19, // 26: v1sync.SyncPeerService.SetAvailableResources:output_type -> google.protobuf.Empty
	19, // 27: v1sync.SyncPeerService.SetConfig:output_type -> google.protobuf.Empty
	10, // 28: v1sync.SyncPeerService.GetConfig:output_type -> v1sync.RemoteConfig
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_v1sync_syncservice_proto_init() }
func file_v1sync_syncservice_proto_init() {
	if File_v1sync_syncservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1sync_syncservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_v1sync_syncservice_proto_goTypes,
		DependencyIndexes: file_v1sync_syncservice_proto_depIdxs,
		EnumInfos:         file_v1sync_syncservice_proto_enumTypes,
		MessageInfos:      file_v1sync_syncservice_proto_msgTypes,
	}.Build()
	File_v1sync_syncservice_proto = out.File
	file_v1sync_syncservice_proto_rawDesc = nil
	file_v1sync_syncservice_proto_goTypes = nil
	file_v1sync_syncservice_proto_depIdxs = nil
}
